#!/bin/bash
# RemoteClaude Project Initialization Script
# Sets up a new secure development environment

set -e

PROJECT_ID="${PROJECT_ID:-default}"
PROJECT_NAME="${PROJECT_NAME:-RemoteClaude Project}"
PROJECT_TYPE="${PROJECT_TYPE:-general}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[RemoteClaude]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Initialize project workspace
init_workspace() {
    log "Initializing workspace for project: $PROJECT_NAME"
    
    # Create project structure
    mkdir -p /workspace/{src,docs,tests,config,scripts}
    
    # Set proper permissions
    chown -R claude:claude /workspace
    chmod -R 755 /workspace
    
    # Initialize Git repository
    cd /workspace
    git init
    git config user.name "RemoteClaude User"
    git config user.email "${PROJECT_ID}@remoteclaude.dev"
    
    # Create basic files based on project type
    case "$PROJECT_TYPE" in
        "node"|"javascript"|"typescript")
            init_node_project
            ;;
        "python")
            init_python_project
            ;;
        "go")
            init_go_project
            ;;
        "react")
            init_react_project
            ;;
        "vue")
            init_vue_project
            ;;
        *)
            init_general_project
            ;;
    esac
    
    # Create project README
    create_readme
    
    # Create .gitignore
    create_gitignore
    
    # Create initial commit
    git add .
    git commit -m "🚀 Initial commit: $PROJECT_NAME

Created by RemoteClaude v3.0
Project Type: $PROJECT_TYPE
Project ID: $PROJECT_ID

🤖 Generated with RemoteClaude Secure Development Environment"

    log "✅ Project initialization complete!"
    info "Project ID: $PROJECT_ID"
    info "Project Type: $PROJECT_TYPE"
    info "Workspace: /workspace"
}

init_node_project() {
    log "Setting up Node.js project..."
    
    cat > package.json << EOF
{
  "name": "$PROJECT_ID",
  "version": "1.0.0",
  "description": "$PROJECT_NAME - Created with RemoteClaude",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
    "test": "jest",
    "lint": "eslint src/",
    "format": "prettier --write src/"
  },
  "keywords": ["remoteclaude", "development"],
  "author": "RemoteClaude User",
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.0.0",
    "eslint": "^8.0.0",
    "prettier": "^3.0.0"
  }
}
EOF

    cat > src/index.js << 'EOF'
// Generated by RemoteClaude v3.0
console.log('🚀 Hello from RemoteClaude!');
console.log('This Node.js project is running in a secure Docker container.');

const main = async () => {
    console.log('📁 Project initialized successfully!');
    console.log('🤖 Ready for Claude-powered development!');
};

main().catch(console.error);
EOF
    
    info "Node.js project structure created"
}

init_python_project() {
    log "Setting up Python project..."
    
    cat > requirements.txt << EOF
# RemoteClaude Python Project Dependencies
fastapi>=0.104.0
uvicorn>=0.24.0
requests>=2.31.0
pytest>=7.4.0
black>=23.10.0
flake8>=6.1.0
EOF

    cat > src/main.py << 'EOF'
#!/usr/bin/env python3
"""
RemoteClaude Python Project
Generated by RemoteClaude v3.0 Secure Development Environment
"""

def main():
    print("🚀 Hello from RemoteClaude Python Project!")
    print("🤖 This project is running in a secure Docker container.")
    print("📁 Ready for Claude-powered Python development!")

if __name__ == "__main__":
    main()
EOF

    cat > tests/test_main.py << 'EOF'
"""
Test module for RemoteClaude project
"""

def test_main():
    assert True  # Placeholder test
    
def test_remoteclaude_environment():
    import os
    assert os.path.exists('/workspace')
EOF

    chmod +x src/main.py
    info "Python project structure created"
}

init_react_project() {
    log "Setting up React project..."
    
    # Note: In a real implementation, we'd use create-react-app
    # For now, create a basic structure
    mkdir -p src/components src/hooks src/utils public
    
    cat > package.json << EOF
{
  "name": "$PROJECT_ID",
  "version": "1.0.0",
  "description": "$PROJECT_NAME - React App created with RemoteClaude",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": ["react-app"]
  },
  "browserslist": {
    "production": [">0.2%", "not dead", "not op_mini all"],
    "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
  }
}
EOF

    cat > src/App.js << 'EOF'
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>🚀 RemoteClaude React App</h1>
        <p>Created with RemoteClaude v3.0 Secure Development Environment</p>
        <p>🤖 Ready for Claude-powered React development!</p>
      </header>
    </div>
  );
}

export default App;
EOF

    cat > public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>RemoteClaude React App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
EOF

    info "React project structure created"
}

init_general_project() {
    log "Setting up general project..."
    
    cat > src/main.txt << EOF
RemoteClaude General Project
===========================

This is a general-purpose project created with RemoteClaude v3.0.

Features:
- Secure Docker-based development environment
- Git repository initialization
- Claude CLI integration
- Isolated workspace

Getting Started:
1. Use Claude to generate code: claude "Create a simple script"
2. Edit files with vim or nano
3. Run tests and build processes
4. Commit changes with git

Happy coding! 🚀
EOF

    info "General project structure created"
}

create_readme() {
    cat > README.md << EOF
# $PROJECT_NAME

> Created with RemoteClaude v3.0 Secure Development Environment

## Overview

This project was generated using RemoteClaude, a mobile-driven Docker-based development platform that provides secure, isolated development environments.

## Project Details

- **Project ID**: \`$PROJECT_ID\`
- **Project Type**: \`$PROJECT_TYPE\`
- **Created**: \`$(date)\`
- **Environment**: Docker Container (Ubuntu 22.04 LTS)

## Security Features

- ✅ Isolated Docker container environment
- ✅ Non-root user execution
- ✅ Resource limits (CPU: 1.0, Memory: 2GB)
- ✅ Network isolation
- ✅ File system permissions
- ✅ Git repository with proper configuration

## Development Tools Included

- Git version control
- Node.js & npm
- Python 3 & pip
- Go compiler
- Rust compiler
- Java JDK 11
- Essential build tools
- Text editors (vim, nano)

## Getting Started

1. **Connect via RemoteClaude iPhone app**
   - Scan QR code to connect
   - Execute commands remotely

2. **Use Claude CLI**
   \`\`\`bash
   claude "Help me create a new feature"
   claude "Review my code for improvements"
   claude "Generate unit tests for my functions"
   \`\`\`

3. **Standard development workflow**
   \`\`\`bash
   git status
   git add .
   git commit -m "Your changes"
   \`\`\`

## Remote Development

This project runs in a secure Docker container managed by RemoteClaude:

- **Container Runtime**: Ubuntu 22.04 LTS
- **User**: \`claude\` (non-root)
- **Workspace**: \`/workspace\`
- **Network**: Isolated Docker network
- **Storage**: Persistent volumes

## Claude Integration

Claude AI assists with:
- Code generation and editing
- Project architecture decisions
- Code review and optimization
- Documentation generation
- Debugging and troubleshooting

---

🤖 **Powered by RemoteClaude v3.0**  
📱 **Mobile-First Development Platform**  
🔒 **Enterprise-Grade Security**
EOF
}

create_gitignore() {
    cat > .gitignore << EOF
# RemoteClaude Project .gitignore
# Generated for $PROJECT_TYPE project

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.local
.env.production

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg

# Go
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out
go.work

# Rust
/target/
**/*.rs.bk

# Java
*.class
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar

# Build outputs
dist/
build/
*.tar.gz

# RemoteClaude specific
.remoteclaude/
*.remoteclaude.bak
EOF
}

# Check if running in container
if [ ! -f /.dockerenv ]; then
    error "This script must be run inside a Docker container"
fi

# Main execution
main() {
    log "🚀 RemoteClaude Project Initialization"
    log "Container: $(hostname)"
    log "User: $(whoami)"
    log "Working Directory: $(pwd)"
    
    init_workspace
    
    log "🎉 Project setup complete!"
    log "You can now use Claude to develop your project:"
    log "  claude 'Help me get started with this project'"
}

# Run if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi